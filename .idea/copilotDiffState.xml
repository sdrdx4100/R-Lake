<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/R_Lake/settings.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/R_Lake/settings.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Django settings for R_Lake project.&#10;&#10;Generated by 'django-admin startproject' using Django 5.2.4.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/5.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/5.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;from pathlib import Path&#10;&#10;# Build paths inside the project like this: BASE_DIR / 'subdir'.&#10;BASE_DIR = Path(__file__).resolve().parent.parent&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = 'django-insecure-9wi&amp;tes3=pm#(ly^xbkz=z30d@^sotin5+4n0-pr$b7o5=)d^&amp;'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'base.apps.BaseConfig',&#10;    'rest_framework',            # 追加: DRF&#10;    'ingest',                    # 追加: CSV ingestion app&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'R_Lake.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [BASE_DIR / 'templates']&#10;        ,&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'R_Lake.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/5.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': BASE_DIR / 'db.sqlite3',&#10;    }&#10;}&#10;&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/5.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/5.2/howto/static-files/&#10;&#10;STATIC_URL = 'static/'&#10;&#10;# Default primary key field type&#10;# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field&#10;&#10;DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Django settings for R_Lake project.&#10;&#10;Generated by 'django-admin startproject' using Django 5.2.4.&#10;&#10;For more information on this file, see&#10;https://docs.djangoproject.com/en/5.2/topics/settings/&#10;&#10;For the full list of settings and their values, see&#10;https://docs.djangoproject.com/en/5.2/ref/settings/&#10;&quot;&quot;&quot;&#10;&#10;from pathlib import Path&#10;&#10;# Build paths inside the project like this: BASE_DIR / 'subdir'.&#10;BASE_DIR = Path(__file__).resolve().parent.parent&#10;&#10;&#10;# Quick-start development settings - unsuitable for production&#10;# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/&#10;&#10;# SECURITY WARNING: keep the secret key used in production secret!&#10;SECRET_KEY = 'django-insecure-9wi&amp;tes3=pm#(ly^xbkz=z30d@^sotin5+4n0-pr$b7o5=)d^&amp;'&#10;&#10;# SECURITY WARNING: don't run with debug turned on in production!&#10;DEBUG = True&#10;&#10;ALLOWED_HOSTS = []&#10;&#10;&#10;# Application definition&#10;&#10;INSTALLED_APPS = [&#10;    'django.contrib.admin',&#10;    'django.contrib.auth',&#10;    'django.contrib.contenttypes',&#10;    'django.contrib.sessions',&#10;    'django.contrib.messages',&#10;    'django.contrib.staticfiles',&#10;    'base.apps.BaseConfig',&#10;    'rest_framework',            # 追加: DRF&#10;    'ingest',                    # 追加: CSV ingestion app&#10;    'accounts',   # 追加: ユーザー管理&#10;]&#10;&#10;MIDDLEWARE = [&#10;    'django.middleware.security.SecurityMiddleware',&#10;    'django.contrib.sessions.middleware.SessionMiddleware',&#10;    'django.middleware.common.CommonMiddleware',&#10;    'django.middleware.csrf.CsrfViewMiddleware',&#10;    'django.contrib.auth.middleware.AuthenticationMiddleware',&#10;    'django.contrib.messages.middleware.MessageMiddleware',&#10;    'django.middleware.clickjacking.XFrameOptionsMiddleware',&#10;]&#10;&#10;ROOT_URLCONF = 'R_Lake.urls'&#10;&#10;TEMPLATES = [&#10;    {&#10;        'BACKEND': 'django.template.backends.django.DjangoTemplates',&#10;        'DIRS': [BASE_DIR / 'templates']&#10;        ,&#10;        'APP_DIRS': True,&#10;        'OPTIONS': {&#10;            'context_processors': [&#10;                'django.template.context_processors.request',&#10;                'django.contrib.auth.context_processors.auth',&#10;                'django.contrib.messages.context_processors.messages',&#10;            ],&#10;        },&#10;    },&#10;]&#10;&#10;WSGI_APPLICATION = 'R_Lake.wsgi.application'&#10;&#10;&#10;# Database&#10;# https://docs.djangoproject.com/en/5.2/ref/settings/#databases&#10;&#10;DATABASES = {&#10;    'default': {&#10;        'ENGINE': 'django.db.backends.sqlite3',&#10;        'NAME': BASE_DIR / 'db.sqlite3',&#10;    }&#10;}&#10;&#10;&#10;# Password validation&#10;# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators&#10;&#10;AUTH_PASSWORD_VALIDATORS = [&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',&#10;    },&#10;    {&#10;        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',&#10;    },&#10;]&#10;&#10;&#10;# Internationalization&#10;# https://docs.djangoproject.com/en/5.2/topics/i18n/&#10;&#10;LANGUAGE_CODE = 'en-us'&#10;&#10;TIME_ZONE = 'UTC'&#10;&#10;USE_I18N = True&#10;&#10;USE_TZ = True&#10;&#10;&#10;# Static files (CSS, JavaScript, Images)&#10;# https://docs.djangoproject.com/en/5.2/howto/static-files/&#10;&#10;STATIC_URL = 'static/'&#10;&#10;# Default primary key field type&#10;# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field&#10;&#10;DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/R_Lake/urls.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/R_Lake/urls.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;URL configuration for R_Lake project.&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/5.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.contrib import admin&#10;from django.urls import path, include&#10;from django.views.generic import RedirectView&#10;&#10;urlpatterns = [&#10;    path('', RedirectView.as_view(url='api/', permanent=False)),  # 追加: ルートから/api/へ&#10;    path('admin/', admin.site.urls),&#10;    path('api/', include('ingest.urls')),   # 既存: ingest app の API&#10;]&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;URL configuration for R_Lake project.&#10;&#10;The `urlpatterns` list routes URLs to views. For more information please see:&#10;    https://docs.djangoproject.com/en/5.2/topics/http/urls/&#10;Examples:&#10;Function views&#10;    1. Add an import:  from my_app import views&#10;    2. Add a URL to urlpatterns:  path('', views.home, name='home')&#10;Class-based views&#10;    1. Add an import:  from other_app.views import Home&#10;    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')&#10;Including another URLconf&#10;    1. Import the include() function: from django.urls import include, path&#10;    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))&#10;&quot;&quot;&quot;&#10;from django.contrib import admin&#10;from django.urls import path, include&#10;from django.views.generic import RedirectView&#10;&#10;urlpatterns = [&#10;    path('', RedirectView.as_view(url='api/', permanent=False)),  # 追加: ルートから/api/へ&#10;    path('admin/', admin.site.urls),&#10;    path('api-auth/', include('rest_framework.urls')),       # 追加: DRF 標準ログイン／ログアウト&#10;    path('api/', include('ingest.urls')),   # 既存: ingest app の API&#10;    path('api/accounts/', include('accounts.urls')),         # 追加: ユーザー管理API&#10;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/accounts/serializers.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/accounts/serializers.py" />
              <option name="updatedContent" value="from django.contrib.auth.models import User&#10;from rest_framework import serializers&#10;&#10;class UserSerializer(serializers.ModelSerializer):&#10;    class Meta:&#10;        model = User&#10;        fields = ['id', 'username', 'email', 'is_staff']&#10;&#10;class RegisterSerializer(serializers.ModelSerializer):&#10;    password = serializers.CharField(write_only=True)&#10;    class Meta:&#10;        model = User&#10;        fields = ['username', 'email', 'password']&#10;    def create(self, validated_data):&#10;        return User.objects.create_user(&#10;            username=validated_data['username'],&#10;            email=validated_data.get('email', ''),&#10;            password=validated_data['password']&#10;        )&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/DynamicChart.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/DynamicChart.tsx" />
              <option name="updatedContent" value="import React, { useEffect, useState } from 'react';&#10;import { Line } from 'react-chartjs-2';&#10;import axios from 'axios';&#10;&#10;type Props = { datasetId: number };&#10;&#10;export const DynamicChart: React.FC&lt;Props&gt; = ({ datasetId }) =&gt; {&#10;  const [columns, setColumns] = useState&lt;string[]&gt;([]);&#10;  const [data, setData] = useState&lt;any[]&gt;([]);&#10;  const [xField, setXField] = useState&lt;string&gt;('');&#10;  const [yField, setYField] = useState&lt;string&gt;('');&#10;&#10;  useEffect(() =&gt; {&#10;    axios.get(`/api/datasets`).then(r =&gt; {&#10;      const ds = r.data.find((d: any) =&gt; d.id === datasetId);&#10;      setColumns(ds.columns);&#10;      setXField(ds.columns[0]);&#10;      setYField(ds.columns[1] || ds.columns[0]);&#10;    });&#10;    axios.get(`/api/datasets/${datasetId}/data`).then(r =&gt; setData(r.data));&#10;  }, [datasetId]);&#10;&#10;  const chartData = {&#10;    labels: data.map(d =&gt; d[xField]),&#10;    datasets: [{&#10;      label: yField,&#10;      data: data.map(d =&gt; d[yField]),&#10;      fill: false&#10;    }]&#10;  };&#10;&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;select onChange={e =&gt; setXField(e.target.value)} value={xField}&gt;&#10;        {columns.map(c =&gt; &lt;option key={c}&gt;{c}&lt;/option&gt;)}&#10;      &lt;/select&gt;&#10;      &lt;select onChange={e =&gt; setYField(e.target.value)} value={yField}&gt;&#10;        {columns.map(c =&gt; &lt;option key={c}&gt;{c}&lt;/option&gt;)}&#10;      &lt;/select&gt;&#10;      &lt;Line data={chartData} /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ingest/forms.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ingest/forms.py" />
              <option name="updatedContent" value="from django import forms&#10;&#10;class CSVUploadForm(forms.Form):&#10;    name = forms.CharField(max_length=200, label='Dataset Name')&#10;    file = forms.FileField(label='CSV File')&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ingest/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ingest/models.py" />
              <option name="originalContent" value="from django.db import models&#10;from django.contrib.postgres.fields import JSONField  # PostgreSQL を想定&#10;&#10;class Dataset(models.Model):&#10;    name = models.CharField(max_length=200)&#10;    uploaded_at = models.DateTimeField(auto_now_add=True)&#10;    data = JSONField()  # CSV を一行ずつ JSON 配列で保存&#10;&#10;    def __str__(self):&#10;        return self.name&#10;&#10;" />
              <option name="updatedContent" value="from django.db import models&#10;from django.db.models import JSONField&#10;&#10;class Dataset(models.Model):&#10;    name = models.CharField(max_length=200)&#10;    uploaded_at = models.DateTimeField(auto_now_add=True)&#10;    data = JSONField()  # CSV を一行ずつ JSON 配列で保存&#10;&#10;    def __str__(self):&#10;        return self.name" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ingest/serializers.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ingest/serializers.py" />
              <option name="updatedContent" value="from rest_framework import serializers&#10;from .models import Dataset&#10;import csv, io&#10;&#10;class DatasetSerializer(serializers.ModelSerializer):&#10;    file = serializers.FileField(write_only=True)&#10;&#10;    class Meta:&#10;        model = Dataset&#10;        fields = ['id', 'name', 'uploaded_at', 'data', 'file']&#10;        read_only_fields = ['id', 'uploaded_at', 'data']&#10;&#10;    def create(self, validated_data):&#10;        f = validated_data.pop('file')&#10;        text = io.TextIOWrapper(f, encoding='utf-8')&#10;        reader = csv.DictReader(text)&#10;        rows = list(reader)&#10;        ds = Dataset.objects.create(data=rows, **validated_data)&#10;        return ds&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ingest/urls.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ingest/urls.py" />
              <option name="originalContent" value="from django.urls import path, include&#10;from rest_framework.routers import DefaultRouter&#10;from .views import DatasetViewSet&#10;&#10;router = DefaultRouter()&#10;router.register(r'datasets', DatasetViewSet, basename='dataset')&#10;&#10;urlpatterns = [&#10;    path('', include(router.urls)),&#10;]&#10;&#10;" />
              <option name="updatedContent" value="from django.urls import path, include&#10;from rest_framework.routers import DefaultRouter&#10;from .views import DatasetViewSet, upload_csv  # upload_csv 追加&#10;&#10;router = DefaultRouter()&#10;router.register(r'datasets', DatasetViewSet, basename='dataset')&#10;&#10;urlpatterns = [&#10;    path('upload/', upload_csv, name='upload-csv'),  # 追加&#10;    path('', include(router.urls)),&#10;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ingest/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ingest/views.py" />
              <option name="originalContent" value="from rest_framework import viewsets, status&#10;from rest_framework.decorators import action&#10;from rest_framework.response import Response&#10;from .models import Dataset&#10;from .serializers import DatasetSerializer&#10;import plotly.graph_objects as go&#10;&#10;class DatasetViewSet(viewsets.ModelViewSet):&#10;    queryset = Dataset.objects.all().order_by('-uploaded_at')&#10;    serializer_class = DatasetSerializer&#10;&#10;    @action(detail=True, methods=['get'])&#10;    def plot(self, request, pk=None):&#10;        ds = self.get_object()&#10;        x_col = request.query_params.get('x')&#10;        y_col = request.query_params.get('y')&#10;        if not x_col or not y_col:&#10;            return Response({'detail': 'x,y parameters required'}, status=status.HTTP_400_BAD_REQUEST)&#10;        x_vals = [row.get(x_col) for row in ds.data]&#10;        y_vals = [row.get(y_col) for row in ds.data]&#10;        fig = go.Figure(&#10;            data=go.Scatter(x=x_vals, y=y_vals, mode='lines'),&#10;            layout=go.Layout(&#10;                title=f&quot;{ds.name}: {y_col} vs {x_col}&quot;,&#10;                xaxis={'title': x_col},&#10;                yaxis={'title': y_col},&#10;            )&#10;        )&#10;        return Response(fig.to_dict())&#10;" />
              <option name="updatedContent" value="from rest_framework import viewsets, status&#10;from rest_framework.decorators import action&#10;from rest_framework.response import Response&#10;from .models import Dataset&#10;from .serializers import DatasetSerializer&#10;import plotly.graph_objects as go&#10;from django.shortcuts import render, redirect&#10;from .forms import CSVUploadForm&#10;&#10;class DatasetViewSet(viewsets.ModelViewSet):&#10;    queryset = Dataset.objects.all().order_by('-uploaded_at')&#10;    serializer_class = DatasetSerializer&#10;&#10;    @action(detail=True, methods=['get'])&#10;    def plot(self, request, pk=None):&#10;        ds = self.get_object()&#10;        x_col = request.query_params.get('x')&#10;        y_col = request.query_params.get('y')&#10;        if not x_col or not y_col:&#10;            return Response({'detail': 'x,y parameters required'}, status=status.HTTP_400_BAD_REQUEST)&#10;        x_vals = [row.get(x_col) for row in ds.data]&#10;        y_vals = [row.get(y_col) for row in ds.data]&#10;        fig = go.Figure(&#10;            data=go.Scatter(x=x_vals, y=y_vals, mode='lines'),&#10;            layout=go.Layout(&#10;                title=f&quot;{ds.name}: {y_col} vs {x_col}&quot;,&#10;                xaxis={'title': x_col},&#10;                yaxis={'title': y_col},&#10;            )&#10;        )&#10;        return Response(fig.to_dict())&#10;&#10;def upload_csv(request):&#10;    if request.method == 'POST':&#10;        form = CSVUploadForm(request.POST, request.FILES)&#10;        if form.is_valid():&#10;            serializer = DatasetSerializer(data={&#10;                'name': form.cleaned_data['name'],&#10;                'file': form.cleaned_data['file'],&#10;            })&#10;            if serializer.is_valid():&#10;                serializer.save()&#10;                return redirect('dataset-list')&#10;    else:&#10;        form = CSVUploadForm()&#10;    return render(request, 'ingest/upload.html', {'form': form})" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/migrations/20240601_create_datasets_and_records.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/migrations/20240601_create_datasets_and_records.sql" />
              <option name="updatedContent" value="CREATE TABLE datasets (&#10;  id SERIAL PRIMARY KEY,&#10;  name TEXT NOT NULL,&#10;  columns JSONB NOT NULL,&#10;  created_at TIMESTAMP DEFAULT NOW()&#10;);&#10;&#10;CREATE TABLE records (&#10;  id SERIAL PRIMARY KEY,&#10;  dataset_id INTEGER REFERENCES datasets(id),&#10;  data JSONB NOT NULL&#10;);&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/controllers/datasetController.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/controllers/datasetController.ts" />
              <option name="updatedContent" value="import { Request, Response } from 'express';&#10;import CsvIngestionService from '../services/CsvIngestionService';&#10;import db from '../db';&#10;&#10;export async function uploadCsv(req: Request, res: Response) {&#10;  // ...existing code for multer取得...&#10;  const dataset = await CsvIngestionService.ingest(req.file.path, req.body.name);&#10;  res.json(dataset);&#10;}&#10;&#10;export async function listDatasets(req: Request, res: Response) {&#10;  const list = await db.Dataset.findAll({ attributes: ['id','name','columns','created_at'] });&#10;  res.json(list);&#10;}&#10;&#10;export async function getData(req: Request, res: Response) {&#10;  const { id } = req.params;&#10;  const records = await db.Record.findAll({&#10;    where: { datasetId: id },&#10;    attributes: ['data']&#10;  });&#10;  res.json(records.map(r =&gt; r.data));&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/routes/datasetRoutes.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/routes/datasetRoutes.ts" />
              <option name="updatedContent" value="import express from 'express';&#10;import multer from 'multer';&#10;import { uploadCsv, listDatasets, getData } from '../controllers/datasetController';&#10;&#10;const router = express.Router();&#10;const upload = multer({ dest: 'uploads/' });&#10;&#10;router.post('/datasets', upload.single('file'), uploadCsv);&#10;router.get('/datasets', listDatasets);&#10;router.get('/datasets/:id/data', getData);&#10;&#10;export default router;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/CsvIngestionService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/CsvIngestionService.ts" />
              <option name="updatedContent" value="import fs from 'fs';&#10;import csv from 'csv-parser';&#10;import db from '../db';  // SequelizeやTypeORMのインスタンス&#10;&#10;class CsvIngestionService {&#10;  async ingest(filePath: string, name: string) {&#10;    // datasetsテーブルにメタ登録&#10;    const dataset = await db.Dataset.create({&#10;      name,&#10;      columns: []  // 後で上書き&#10;    });&#10;&#10;    const columnsSet = new Set&lt;string&gt;();&#10;    const records: any[] = [];&#10;    await new Promise((resolve, reject) =&gt; {&#10;      fs.createReadStream(filePath)&#10;        .pipe(csv())&#10;        .on('data', row =&gt; {&#10;          Object.keys(row).forEach(k =&gt; columnsSet.add(k));&#10;          records.push({ datasetId: dataset.id, data: row });&#10;        })&#10;        .on('end', resolve)&#10;        .on('error', reject);&#10;    });&#10;&#10;    // カラム情報更新&#10;    await dataset.update({ columns: Array.from(columnsSet) });&#10;&#10;    // レコードをbulk登録&#10;    await db.Record.bulkCreate(records);&#10;&#10;    return dataset;&#10;  }&#10;}&#10;&#10;export default new CsvIngestionService();&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/ingest/upload.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/ingest/upload.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;utf-8&quot;&gt;&#10;    &lt;title&gt;Upload CSV&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;h1&gt;Upload CSV to Create Dataset&lt;/h1&gt;&#10;    &lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;&#10;        {% csrf_token %}&#10;        {{ form.as_p }}&#10;        &lt;button type=&quot;submit&quot;&gt;Upload&lt;/button&gt;&#10;    &lt;/form&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#13;&#10;&lt;html&gt;&#13;&#10;&lt;head&gt;&#13;&#10;    &lt;meta charset=&quot;utf-8&quot;&gt;&#13;&#10;    &lt;title&gt;Upload CSV&lt;/title&gt;&#13;&#10;&lt;/head&gt;&#13;&#10;&lt;body&gt;&#13;&#10;    {% extends &quot;rest_framework/base.html&quot; %}&#13;&#10;    {% block title %}Upload CSV{% endblock %}&#13;&#10;&#13;&#10;    {% block content %}&#13;&#10;      &lt;div class=&quot;container&quot;&gt;&#13;&#10;        &lt;h1 class=&quot;section-title&quot;&gt;Upload CSV to Create Dataset&lt;/h1&gt;&#13;&#10;        &lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; class=&quot;api-form&quot;&gt;&#13;&#10;          {% csrf_token %}&#13;&#10;          &lt;fieldset class=&quot;data&quot;&gt;&#13;&#10;            {{ form.as_p }}&#13;&#10;          &lt;/fieldset&gt;&#13;&#10;          &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Upload&lt;/button&gt;&#13;&#10;        &lt;/form&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    {% endblock %}&#13;&#10;&lt;/body&gt;&#13;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>